INTERPRETER/STATEMENT GRAMMAR:

1) program        → declaration* EOF ;
2) declaration    → varDecl | statement | funDecl ;
3) statement      → exprStmt | forStmt | ifStmt | printStmt | returnStmt |
      whileStmt | block ;
4) returnStmt     → "return" expression? ";";
// The first clause is the initializer
// The second class is the condition for loop termination
// The last clause is the increment
4) forStmt        → "for" "(" (varDecl | exprStmt | ";") expression? ";" expression? ")" statement;
5) whileStmt      → "while" "(" expression ")" statement ;
6) ifStmt         → "if" "(" expression ")" statement
                    ("else" statement)? ;
7) block          → "{" declaration* "}";
8) varDecl        → "var" IDENTIFIER ( "=" expression )? ";" ;

funDecl     → "fun" function
function    → IDENTIFIER "(" parameters? ")" block ;
parameters  → IDENTIFIER ("," IDENTIFIER)* ;



PARSING GRAMMAR:

1) comma          → expression (","expression)* ; 
2) expression     → assignment ;
3) assignment     → IDENTIFIER "=" assignment | logic_or;
4) logic_or       → logic_and ( "or" logic_and)*;
5) logic_and      → equality ( "and" equality)*;
6) conditional (?:)    → (equality|conditional) ? (primary|conditional) : (primary|conditional) ;   right to left (ignore for main branch)
7) equality       → comparison ( ( "!=" | "==" ) comparison )* ;
8) comparison     → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
9) term           → factor ( ( "-" | "+" ) factor )* ;
10) factor        → unary ( ( "/" | "*" ) unary )* ;
11) unary         → ( "!" | "-" ) unary | call ;
// argument needs to have at least one expression in it, a call allows for empty arguments by making argument field optional.
12) call          → primary ( "(" arguments? ")" )* ;  
13) primary       → NUMBER | STRING | "true" | "false" | "nil"
               | "(" expression ")" | IDENTIFIER;

arguments      → expression ("," expression)* ;               